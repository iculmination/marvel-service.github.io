{"version":3,"file":"static/js/658.1728fc70.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/appBanner/AppBanner.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import errorGif from \"./icons8-error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      src={errorGif}\r\n      alt=\"Error\"\r\n      style={{ margin: \"0 auto\", alignSelf: \"center\", transform: \"scale(1.1)\" }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport \"./comicsList.scss\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nconst ComicsList = (props) => {\n  const { loading, error, getAllComics, clearError } = useMarvelService();\n  const [comics, setComics] = useState([]);\n  const [offset, setOffset] = useState(5000);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    clearError();\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllComics(offset).then(onComicsLoaded);\n  };\n\n  const onComicsLoaded = (loadedComics) => {\n    console.log(loadedComics);\n    setComics([...comics, ...loadedComics]);\n    setOffset(offset + 8);\n    setNewItemLoading(false);\n  };\n\n  const content = <View comics={comics} />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"comics__list\">\n      {errorMessage}\n      {spinner}\n      <ul className=\"comics__grid\">{content}</ul>\n      <button\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n        disabled={newItemLoading}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nconst View = ({ comics }) => {\n  return comics.map((item) => {\n    return (\n      <li className=\"comics__item\" key={item.id}>\n        <Link to={`/comics/${item.id}`}>\n          <img\n            src={item.thumbnail}\n            alt={item.title}\n            className=\"comics__item-img\"\n          />\n          <div className=\"comics__item-name\">{item.title}</div>\n          <div className=\"comics__item-price\">{item.price}</div>\n        </Link>\n      </li>\n    );\n  });\n};\n\nexport default ComicsList;\n","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <AppBanner />\r\n      <ComicsList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComicsPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      {\r\n        method = \"GET\",\r\n        body = null,\r\n        headers = { \"Content-Type\": \"application/json\" },\r\n      } = {}\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=5f6e9a2d10bb9d4917e2be5fc239d5d5\";\r\n  const _baseOffset = 400;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    try {\r\n      const res = await request(\r\n        `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n      );\r\n      return res.data.results.map((character) => {\r\n        return _transformCharacter(character);\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    try {\r\n      const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n      return _transformCharacter(res.data.results[0]);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const getAllComics = async (offset = 5000) => {\r\n    try {\r\n      const res = await request(\r\n        `${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`\r\n      );\r\n      return res.data.results.map((comics) => {\r\n        return _transformComics(comics);\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    try {\r\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n      return _transformComics(res.data.results[0], true);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const _transformCharacter = (character) => {\r\n    return {\r\n      name: character.name,\r\n      id: character.id,\r\n      description: character.description\r\n        ? `${character.description.slice(0, 210)} ...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: character.thumbnail.path + \".\" + character.thumbnail.extension,\r\n      homepage: character.urls[0].url,\r\n      wiki: character.urls[1].url,\r\n      comics: character.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics, singleComic) => {\r\n    let comicLanguage = \"No information\";\r\n\r\n    if (\r\n      comics.textObjects &&\r\n      comics.textObjects[0] &&\r\n      comics.textObjects[0].language &&\r\n      comics.textObjects[0].language !== \"\" &&\r\n      singleComic\r\n    ) {\r\n      comicLanguage = comics.textObjects[0].language;\r\n    }\r\n\r\n    let data = {\r\n      title: comics.title,\r\n      id: comics.id,\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      // details: comics.urls[0].url,\r\n      description: comics.description\r\n        ? comics.description\r\n        : \"There is no description for this comic\",\r\n      pages: comics.pageCount,\r\n      languages: comicLanguage,\r\n      price:\r\n        comics.prices[0].price === 0\r\n          ? \"NOT AVAILABLE\"\r\n          : `$${comics.prices[0].price}`,\r\n    };\r\n\r\n    return data;\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    clearError,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ErrorMessage","_jsx","src","errorGif","alt","style","margin","alignSelf","transform","View","_ref","comics","map","item","className","children","_jsxs","Link","to","concat","id","thumbnail","title","price","props","loading","error","getAllComics","clearError","useMarvelService","setComics","useState","offset","setOffset","newItemLoading","setNewItemLoading","useEffect","onRequest","initial","then","onComicsLoaded","loadedComics","console","log","content","errorMessage","spinner","Spinner","onClick","disabled","AppBanner","avengers","avengersLogo","ComicsPage","_Fragment","ComicsList","request","useHttp","setLoading","setError","useCallback","async","url","method","body","headers","arguments","length","undefined","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","character","name","description","slice","path","extension","homepage","urls","wiki","items","_transformComics","singleComic","comicLanguage","textObjects","language","pages","pageCount","languages","prices","getAllCharacters","results","getCharacter","res","getComic"],"sourceRoot":""}