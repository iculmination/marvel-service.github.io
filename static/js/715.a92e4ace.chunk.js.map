{"version":3,"file":"static/js/715.a92e4ace.chunk.js","mappings":"6LAEA,MAUA,EAVqBA,KAEjBC,EAAAA,EAAAA,KAAA,OACEC,IAAKC,EACLC,IAAI,QACJC,MAAO,CAAEC,OAAQ,SAAUC,UAAW,SAAUC,UAAW,e,gHCCjE,MAkCMC,EAAOC,IAAgB,IAAf,MAAEC,GAAOD,EACrB,OACEE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3Bb,EAAAA,EAAAA,KAAA,OAAKC,IAAKS,EAAMI,UAAWX,IAAI,QAAQS,UAAU,uBACjDD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EACjCb,EAAAA,EAAAA,KAAA,MAAIY,UAAU,qBAAoBC,SAAEH,EAAMK,SAC1Cf,EAAAA,EAAAA,KAAA,KAAGY,UAAU,sBAAqBC,SAAEH,EAAMM,eAC1CL,EAAAA,EAAAA,MAAA,KAAGC,UAAU,sBAAqBC,SAAA,CAAEH,EAAMO,MAAM,aAChDN,EAAAA,EAAAA,MAAA,KAAGC,UAAU,sBAAqBC,SAAA,CAAC,aAAWH,EAAMQ,cACpDlB,EAAAA,EAAAA,KAAA,OAAKY,UAAU,sBAAqBC,SAAEH,EAAMS,YAE9CnB,EAAAA,EAAAA,KAACoB,EAAAA,GAAI,CAACC,GAAG,YAAYT,UAAU,qBAAoBC,SAAC,kBATnBH,EAAMY,GAYnC,EAIV,EApDyBC,KACvB,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,OACbf,EAAOgB,IAAYC,EAAAA,EAAAA,UAAS,CAAC,IAE9B,MAAEC,EAAK,QAAEC,EAAO,SAAEC,EAAQ,WAAEC,IAAeC,EAAAA,EAAAA,MAEjDC,EAAAA,EAAAA,YAAU,KACRC,GAAW,GAEV,IAEH,MAAMA,EAAYA,KAChBH,IACAD,EAASN,GAASW,KAAKC,EAAc,EAGjCA,EAAiBC,IACrBC,QAAQC,IAAIF,GACZX,EAASW,EAAW,EAGhBG,EAAeZ,GAAQ5B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAAM,KAC1C0C,EAAUZ,GAAU7B,EAAAA,EAAAA,KAAC0C,EAAAA,EAAO,IAAM,KAClCC,EAAYf,GAASC,EAAoC,MAAzB7B,EAAAA,EAAAA,KAACQ,EAAI,CAACE,MAAOA,IAEnD,OACEC,EAAAA,EAAAA,MAAAiC,EAAAA,SAAA,CAAA/B,SAAA,CACG2B,EACAC,EACAE,IACA,C,8CCpCA,MCoGP,EApGyBX,KACvB,MAAM,QAAEH,EAAO,QAAEgB,EAAO,MAAEjB,EAAK,WAAEG,GDDZe,MACrB,MAAOjB,EAASkB,IAAcpB,EAAAA,EAAAA,WAAS,IAChCC,EAAOoB,IAAYrB,EAAAA,EAAAA,UAAS,MAkCnC,MAAO,CAAEE,UAASgB,SAhCFI,EAAAA,EAAAA,cACdC,eACEC,GAMI,IALJ,OACEC,EAAS,MAAK,KACdC,EAAO,KAAI,QACXC,EAAU,CAAE,eAAgB,qBAC7BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAELR,GAAW,GAEX,IACE,MAAMW,QAAiBC,MAAMR,EAAK,CAAEC,SAAQC,OAAMC,YAElD,IAAKI,EAASE,GACZ,MAAM,IAAIC,MAAM,mBAADC,OAAoBX,EAAG,cAAAW,OAAaJ,EAASK,SAG9D,MAAMC,QAAaN,EAASO,OAG5B,OADAlB,GAAW,GACJiB,CACT,CAAE,MAAOE,GACPnB,GAAW,GACXC,EAASkB,EAAEC,QACb,CACF,GACA,IAKyBvC,QAAOG,YAFfkB,EAAAA,EAAAA,cAAY,IAAMD,EAAS,OAAO,IAEP,ECnCEF,GAE1CsB,EAAW,4CACXC,EAAU,0CAuCVC,EAAuBC,IACpB,CACLC,KAAMD,EAAUC,KAChBlD,GAAIiD,EAAUjD,GACdN,YAAauD,EAAUvD,YAAW,GAAA8C,OAC3BS,EAAUvD,YAAYyD,MAAM,EAAG,KAAI,QACtC,6CACJ3D,UAAWyD,EAAUzD,UAAU4D,KAAO,IAAMH,EAAUzD,UAAU6D,UAChEC,SAAUL,EAAUM,KAAK,GAAG1B,IAC5B2B,KAAMP,EAAUM,KAAK,GAAG1B,IACxB4B,OAAQR,EAAUQ,OAAOC,QAIvBC,EAAmBA,CAACF,EAAQG,KAChC,IAAIC,EAAgB,iBA4BpB,OAzBEJ,EAAOK,aACPL,EAAOK,YAAY,IACnBL,EAAOK,YAAY,GAAGC,UACa,KAAnCN,EAAOK,YAAY,GAAGC,UACtBH,IAEAC,EAAgBJ,EAAOK,YAAY,GAAGC,UAG7B,CACTtE,MAAOgE,EAAOhE,MACdO,GAAIyD,EAAOzD,GACXR,UAAWiE,EAAOjE,UAAU4D,KAAO,IAAMK,EAAOjE,UAAU6D,UAE1D3D,YAAa+D,EAAO/D,YAChB+D,EAAO/D,YACP,yCACJC,MAAO8D,EAAOO,UACdpE,UAAWiE,EACXhE,MAC6B,IAA3B4D,EAAOQ,OAAO,GAAGpE,MACb,gBAAe,IAAA2C,OACXiB,EAAOQ,OAAO,GAAGpE,OAGlB,EAGb,MAAO,CACLU,UACAD,QACA4D,iBArFuBtC,iBAAiC,IAA1BuC,EAAMlC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFlB,IAGlB,IAIE,aAHkBV,EAAQ,GAADiB,OACpBM,EAAQ,8BAAAN,OAA6B2B,EAAM,KAAA3B,OAAIO,KAEzCL,KAAK0B,QAAQC,KAAKpB,GACpBD,EAAoBC,IAE/B,CAAE,MAAO3C,GAAQ,CACnB,EA6EEgE,aA3EmB1C,UACnB,IACE,MAAM2C,QAAYhD,EAAQ,GAADiB,OAAIM,EAAQ,eAAAN,OAAcxC,EAAE,KAAAwC,OAAIO,IACzD,OAAOC,EAAoBuB,EAAI7B,KAAK0B,QAAQ,GAC9C,CAAE,MAAO9D,GAAQ,GAwEjBkE,aArEmB5C,iBAA0B,IAAnBuC,EAAMlC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IACnC,IAIE,aAHkBV,EAAQ,GAADiB,OACpBM,EAAQ,0BAAAN,OAAyB2B,EAAM,KAAA3B,OAAIO,KAErCL,KAAK0B,QAAQC,KAAKZ,GACpBE,EAAiBF,IAE5B,CAAE,MAAOnD,GAAQ,CACnB,EA6DEE,SA3DeoB,UACf,IACE,MAAM2C,QAAYhD,EAAQ,GAADiB,OAAIM,EAAQ,WAAAN,OAAUxC,EAAE,KAAAwC,OAAIO,IACrD,OAAOY,EAAiBY,EAAI7B,KAAK0B,QAAQ,IAAI,EAC/C,CAAE,MAAO9D,GAAQ,GAwDjBG,aACD,C","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import errorGif from \"./icons8-error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      src={errorGif}\r\n      alt=\"Error\"\r\n      style={{ margin: \"0 auto\", alignSelf: \"center\", transform: \"scale(1.1)\" }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport \"./singleComicsPage.scss\";\r\n\r\nconst SingleComicsPage = () => {\r\n  const { comicId } = useParams();\r\n  const [comic, setComic] = useState({});\r\n\r\n  const { error, loading, getComic, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    onRequest();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const onRequest = () => {\r\n    clearError();\r\n    getComic(comicId).then(onComicLoaded);\r\n  };\r\n\r\n  const onComicLoaded = (loadedChar) => {\r\n    console.log(loadedChar);\r\n    setComic(loadedChar);\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(error || loading) ? <View comic={comic} /> : null;\r\n\r\n  return (\r\n    <>\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </>\r\n  );\r\n};\r\n\r\nconst View = ({ comic }) => {\r\n  return (\r\n    <div className=\"single-comic\" key={comic.id}>\r\n      <img src={comic.thumbnail} alt=\"x-men\" className=\"single-comic__img\" />\r\n      <div className=\"single-comic__info\">\r\n        <h2 className=\"single-comic__name\">{comic.title}</h2>\r\n        <p className=\"single-comic__descr\">{comic.description}</p>\r\n        <p className=\"single-comic__descr\">{comic.pages} pages</p>\r\n        <p className=\"single-comic__descr\">Language: {comic.languages}</p>\r\n        <div className=\"single-comic__price\">{comic.price}</div>\r\n      </div>\r\n      <Link to=\"../comics\" className=\"single-comic__back\">\r\n        Back to all\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleComicsPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      {\r\n        method = \"GET\",\r\n        body = null,\r\n        headers = { \"Content-Type\": \"application/json\" },\r\n      } = {}\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=5f6e9a2d10bb9d4917e2be5fc239d5d5\";\r\n  const _baseOffset = 400;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    try {\r\n      const res = await request(\r\n        `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n      );\r\n      return res.data.results.map((character) => {\r\n        return _transformCharacter(character);\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    try {\r\n      const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n      return _transformCharacter(res.data.results[0]);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const getAllComics = async (offset = 5000) => {\r\n    try {\r\n      const res = await request(\r\n        `${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`\r\n      );\r\n      return res.data.results.map((comics) => {\r\n        return _transformComics(comics);\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    try {\r\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n      return _transformComics(res.data.results[0], true);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const _transformCharacter = (character) => {\r\n    return {\r\n      name: character.name,\r\n      id: character.id,\r\n      description: character.description\r\n        ? `${character.description.slice(0, 210)} ...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: character.thumbnail.path + \".\" + character.thumbnail.extension,\r\n      homepage: character.urls[0].url,\r\n      wiki: character.urls[1].url,\r\n      comics: character.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics, singleComic) => {\r\n    let comicLanguage = \"No information\";\r\n\r\n    if (\r\n      comics.textObjects &&\r\n      comics.textObjects[0] &&\r\n      comics.textObjects[0].language &&\r\n      comics.textObjects[0].language !== \"\" &&\r\n      singleComic\r\n    ) {\r\n      comicLanguage = comics.textObjects[0].language;\r\n    }\r\n\r\n    let data = {\r\n      title: comics.title,\r\n      id: comics.id,\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      // details: comics.urls[0].url,\r\n      description: comics.description\r\n        ? comics.description\r\n        : \"There is no description for this comic\",\r\n      pages: comics.pageCount,\r\n      languages: comicLanguage,\r\n      price:\r\n        comics.prices[0].price === 0\r\n          ? \"NOT AVAILABLE\"\r\n          : `$${comics.prices[0].price}`,\r\n    };\r\n\r\n    return data;\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    clearError,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ErrorMessage","_jsx","src","errorGif","alt","style","margin","alignSelf","transform","View","_ref","comic","_jsxs","className","children","thumbnail","title","description","pages","languages","price","Link","to","id","SingleComicsPage","comicId","useParams","setComic","useState","error","loading","getComic","clearError","useMarvelService","useEffect","onRequest","then","onComicLoaded","loadedChar","console","log","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","body","headers","arguments","length","undefined","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","character","name","slice","path","extension","homepage","urls","wiki","comics","items","_transformComics","singleComic","comicLanguage","textObjects","language","pageCount","prices","getAllCharacters","offset","results","map","getCharacter","res","getAllComics"],"sourceRoot":""}