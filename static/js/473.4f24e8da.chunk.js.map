{"version":3,"file":"static/js/473.4f24e8da.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import errorGif from \"./icons8-error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      src={errorGif}\r\n      alt=\"Error\"\r\n      style={{ margin: \"0 auto\", alignSelf: \"center\", transform: \"scale(1.1)\" }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  // eslint-disable-next-line\n  useEffect(() => updateChar(), []);\n\n  const onCharLoaded = (char) => {\n    if (char) {\n      setChar(char);\n    }\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011100) + 1011100);\n    getCharacter(id).then(onCharLoaded).catch()\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {errorMessage}\n      {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button className=\"button button__main\" onClick={updateChar}>\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, id } = char;\n  let imgStyle =\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ? { objectFit: \"contain\" }\n      : { objectFit: \"cover\" };\n\n  return (\n    <div className=\"randomchar__block\" key={id}>\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={imgStyle}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n  const [characters, setCharacters] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(400);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { loading, error, getAllCharacters, clearError } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    clearError();\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset).then(onCharactersLoaded);\n  };\n\n  const onCharactersLoaded = (newCharacters) => {\n    if (!newCharacters) return;\n    let ended = false;\n    if (newCharacters.length < 9) {\n      ended = true;\n    }\n    setCharacters([...characters, ...newCharacters]);\n    setNewItemLoading(false);\n    setOffset(offset + 9);\n    setCharEnded(ended);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n  const content = (\n    <View\n      characters={characters}\n      onCharSelected={props.onCharSelected}\n      selectedCharID={props.selectedChar}\n    />\n  );\n  return (\n    <div className=\"char__list\">\n      {spinner}\n      {errorMessage}\n      <ul className=\"char__grid\">{content}</ul>\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        onClick={() => onRequest(offset)}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nconst View = ({ characters, onCharSelected, selectedCharID }) => {\n  return characters.map((char) => (\n    <li\n      key={char.id}\n      className={`char__item ${\n        selectedCharID === char.id ? \"char__item_selected\" : \"\"\n      }`}\n      onClick={() => onCharSelected(char.id)}\n      tabIndex=\"0\"\n    >\n      <img src={char.thumbnail} alt={char.name} />\n      <div className=\"char__name\">{char.name}</div>\n    </li>\n  ));\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport Skeleton from \"../skeleton/Skeleton\";\nimport \"./charInfo.scss\";\n\nconst CharInfo = ({ selectedChar }) => {\n  const [char, setChar] = useState(null);\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    if (selectedChar != null) updateChar();\n    // eslint-disable-next-line\n  }, [selectedChar]);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    getCharacter(selectedChar).then(onCharLoaded);\n  };\n\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n  let imgStyle =\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ? { objectFit: \"contain\" }\n      : { objectFit: \"cover\" };\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.map((item, i) => {\n          // eslint-disable-next-line\n          if (i > 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  selectedChar: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({ error: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage/>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList\r\n            onCharSelected={onCharSelected}\r\n            selectedChar={selectedChar}\r\n          />\r\n        </ErrorBoundary>\r\n\r\n        <ErrorBoundary>\r\n          <CharInfo selectedChar={selectedChar} />\r\n        </ErrorBoundary>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      {\r\n        method = \"GET\",\r\n        body = null,\r\n        headers = { \"Content-Type\": \"application/json\" },\r\n      } = {}\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=5f6e9a2d10bb9d4917e2be5fc239d5d5\";\r\n  const _baseOffset = 400;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    try {\r\n      const res = await request(\r\n        `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n      );\r\n      return res.data.results.map((character) => {\r\n        return _transformCharacter(character);\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    try {\r\n      const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n      return _transformCharacter(res.data.results[0]);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const getAllComics = async (offset = 5000) => {\r\n    try {\r\n      const res = await request(\r\n        `${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`\r\n      );\r\n      return res.data.results.map((comics) => {\r\n        return _transformComics(comics);\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    try {\r\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n      return _transformComics(res.data.results[0], true);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const _transformCharacter = (character) => {\r\n    return {\r\n      name: character.name,\r\n      id: character.id,\r\n      description: character.description\r\n        ? `${character.description.slice(0, 210)} ...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: character.thumbnail.path + \".\" + character.thumbnail.extension,\r\n      homepage: character.urls[0].url,\r\n      wiki: character.urls[1].url,\r\n      comics: character.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics, singleComic) => {\r\n    let comicLanguage = \"No information\";\r\n\r\n    if (\r\n      comics.textObjects &&\r\n      comics.textObjects[0] &&\r\n      comics.textObjects[0].language &&\r\n      comics.textObjects[0].language !== \"\" &&\r\n      singleComic\r\n    ) {\r\n      comicLanguage = comics.textObjects[0].language;\r\n    }\r\n\r\n    let data = {\r\n      title: comics.title,\r\n      id: comics.id,\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      // details: comics.urls[0].url,\r\n      description: comics.description\r\n        ? comics.description\r\n        : \"There is no description for this comic\",\r\n      pages: comics.pageCount,\r\n      languages: comicLanguage,\r\n      price:\r\n        comics.prices[0].price === 0\r\n          ? \"NOT AVAILABLE\"\r\n          : `$${comics.prices[0].price}`,\r\n    };\r\n\r\n    return data;\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    clearError,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ErrorMessage","_jsx","src","errorGif","alt","style","margin","alignSelf","transform","View","_ref","char","name","description","thumbnail","homepage","wiki","id","imgStyle","objectFit","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","onCharLoaded","Math","floor","random","then","catch","errorMessage","spinner","Spinner","content","onClick","mjolnir","characters","onCharSelected","selectedCharID","map","concat","tabIndex","props","setCharacters","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharactersLoaded","newCharacters","ended","length","selectedChar","disabled","display","Skeleton","_Fragment","_ref2","comics","item","i","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","body","headers","undefined","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","character","slice","path","extension","urls","items","_transformComics","singleComic","comicLanguage","textObjects","language","title","pages","pageCount","languages","price","prices","results","res","getAllComics","getComic"],"sourceRoot":""}